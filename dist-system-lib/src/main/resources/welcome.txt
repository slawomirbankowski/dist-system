Distributed cache library for JVM applications or through socket/http connectors.

These Agents could be created in many places, many applications and have different services turned on.
At first - Agent is connecting to Registration Services (JDBC, Elasticsearch, Kafka, ...) and register itself, servers and services.
Then, Agent is opening Servers for communication with other clients.
Next, Agent is opening Web API for custom connections.
The last - Agent is checking other Agent connected to Registration Services and

Current agent is running on ${}
Each Agent has:
- Registrations - global repository of agents, servers, clients, issues, events, configurations
- Connectors - clients and servers to connect to other agents
- Services - all services like Cache, Reports, Storages, Spaces, ...
- Api - Web REST API to connect to Agent, typically on port 9999.
- Serializer -  serializer to serialize and deserialize messages and other objects in Agent
- Configuration - agent1.getConfig() - properties to create Agent and services
- Issues - agent.getAgentIssues() - issues like errors and exceptions from Agent and dependent services
- Events - agent.getAgentEvents() - events
- Threads - agent.getAgentThreads() -
- Timers - agent1.getAgentTimers() -
- Tags - agent1.getAgentTags() - set of custom String values to classify agent

### Registrations
Agent is registering to

### Services
Agent might be having many

### API
List of API endpoints:

### Cache
Cache can be fully configured how to keep objects:
- time-based - it means that object is released/disposed after some time
- priority-based - it means that each object is disposed based on priority, top priority would be disposed last
- out-of-memory - large object would be disposed first, small would be disposed the last
- LRU-based - last recently used would not be disposed
- usage-factor-based - usage factor over time is calculated for each object
- keep with replace - replace will be only if new object is in cache, always there must be at least one object
Cache is distributed and can be deployed as many instances with additional configuration.
- there is agent-based system to keep cache-instances connected
- there are callback to be set when something important is happening
- last usage date is available
- get cache size per storage
- refresh all caches with refresh mode
Cache can be connected to different storages to keep cache items and communicate between cache-agents:
- Redis
- Elasticseach
- Kafka
- JDBC-compliant database(s) (with DDL option)
- custom HTTP storage
Cache could be used as:
- library to be linked and used inside application
- standalone application having public API to be used and REST API
- code to be included "as it is"



Each cache is creating agent that can communicate to other configured agents to provide fast read and distributed write.





